version: 2

# This is used as a template for the actual jobs and not actually being run itself
templates:
  job-base-template: &job-base-template
    working_directory: ~/raiden
    docker:
      - image: circleci/python:3.6

  job-prepare-template: &job-prepare-template
    <<: *job-base-template
    environment:
      GETH_URL_LINUX: 'https://gethstore.blob.core.windows.net/builds/geth-linux-amd64-1.7.2-1db4ecdc.tar.gz'
      GETH_URL_MACOS: 'https://gethstore.blob.core.windows.net/builds/geth-darwin-amd64-1.7.2-1db4ecdc.tar.gz'
      GETH_VERSION: '1.7.2'
      SOLC_URL_LINUX: 'https://github.com/ethereum/solidity/releases/download/v0.4.18/solc-static-linux'
      SOLC_URL_MACOS: 'https://www.dropbox.com/s/21xuco6djjpdwd4/solc_0.4.18?dl=0'
      SOLC_VERSION: 'v0.4.18'

    steps:
      - run:
          name: Preparing environment
          # Workaround to enable using env variables in cache keys
          command: |
            echo ${GETH_VERSION} > ~/.env-GETH_VERSION
            echo ${SOLC_VERSION} > ~/.env-SOLC_VERSION
            echo ${PYTHON_VERSION} > ~/.env-PYTHON_VERSION
            echo "export OS_NAME=$(uname -s)" >> ${BASH_ENV}
      - restore_cache:
          keys:
            - source-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Branch }}-
            - source-

      - checkout

      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: system-deps-{{ checksum "~/.env-GETH_VERSION" }}-{{ checksum "~/.env-GETH_VERSION" }}
      - run:
          name: Installing system dependencies
          command: |
            GETH_PATH="${HOME}/.local/bin/geth-${OS_NAME}-${GETH_VERSION}"
            if [ ! -x ${GETH_PATH} ]; then
              mkdir -p ${HOME}/.local/bin
              TEMP=$(mktemp -d 2>/dev/null || mktemp -d -t 'gethtmp')
              pushd ${TEMP}
              wget -O geth.tar.gz ${GETH_URL_LINUX}
              tar xzf geth.tar.gz
              cd geth*/
              install -m 755 geth ${GETH_PATH}
            fi
            ln -sf ${GETH_PATH} ${HOME}/.local/bin/geth

            SOLC_PATH="${HOME}/.local/bin/solc-${OS_NAME}-${SOLC_VERSION}"
            if [ ! -x ${SOLC_PATH} ]; then
              mkdir -p ${HOME}/.local/bin
              curl -L ${SOLC_URL_LINUX} > ${SOLC_PATH}
              chmod 775 ${SOLC_PATH}
            fi
            ln -sf ${SOLC_PATH} ${HOME}/.local/bin/solc
      - save_cache:
          key: system-deps-{{ checksum "~/.env-GETH_VERSION" }}-{{ checksum "~/.env-GETH_VERSION" }}
          paths:
            - "~/.local"
      - restore_cache:
          key: pip-cache-{{ checksum "~/.env-PYTHON_VERSION" }}
      - restore_cache:
          keys:
            - 'python-deps-3.5-{{ checksum "~/.env-PYTHON_VERSION" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}'
            - 'python-deps-3.6-{{ checksum "~/.env-PYTHON_VERSION" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}'
            - 'python-deps-3.5-{{ checksum "~/.env-PYTHON_VERSION" }}-'
            - 'python-deps-3.6-{{ checksum "~/.env-PYTHON_VERSION" }}-'
      - run:
          name: Creating virtualenv
          command: |
            if [ ! -x ~/venv/bin/python ]; then
              python -m venv ~/venv-${PYTHON_VERSION%.*}
            fi
            echo 'export VENV_PATH="$HOME/venv-${PYTHON_VERSION%.*}"' >> ${BASH_ENV}
      - run:
          name: Installing dependencies
          command: |
            echo $PYTHONPATH
            . ${VENV_PATH}/bin/activate
            pip install -U pip wheel
            pip install readme_renderer pyinstaller
            pip install -r requirements-dev.txt
            pip install -e .
      - save_cache:
          key: python-deps-3.5-{{ checksum "~/.env-PYTHON_VERSION" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
          paths:
            - "~/venv-3.5"
      - save_cache:
          key: python-deps-3.6-{{ checksum "~/.env-PYTHON_VERSION" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
          paths:
            - "~/venv-3.6"
      - save_cache:
          key: pip-cache-{{ checksum "~/.env-PYTHON_VERSION" }}
          paths:
            - "~/.cache/pip"
      - persist_to_workspace:
          root: "~"
          paths:
            - .local
            - raiden
            - venv-3.5
            - venv-3.6

  job-check-template: &job-check-template
    <<: *job-base-template
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: setup path
          command: "echo 'export PATH=~/venv-${PYTHON_VERSION%.*}/bin:~/.local/bin:${PATH}' >> ${BASH_ENV}"
      - run:
          name: check flake8
          command: flake8 raiden/ tools/
      - run:
          name: check README formatting
          command: python setup.py check --restructuredtext --strict
      - run:
          name: raiden smoketest
          command: raiden smoketest


  job-test-template: &job-test-template
    <<: *job-base-template
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: setup path
          command: "echo 'export PATH=~/venv-${PYTHON_VERSION%.*}/bin:~/.local/bin:${PATH}' >> ${BASH_ENV}"
      - run:
          name: run tests
          command: coverage run -m py.test -vvvvvv --log-config='raiden:DEBUG' --random $BLOCKCHAIN_TYPE ./raiden/tests/${TEST_TYPE}

jobs:
  prepare-workspace-35:
    <<: *job-prepare-template
    docker:
      - image: circleci/python:3.5

  prepare-workspace-36:
    <<: *job-prepare-template

  check-35:
    <<: *job-check-template
    docker:
      - image: circleci/python:3.5

  check-36:
    <<: *job-check-template

  test-unit-35:
    <<: *job-test-template
    environment:
      TEST_TYPE: unit
    docker:
      - image: circleci/python:3.5

  test-unit-36:
    <<: *job-test-template
    environment:
      TEST_TYPE: unit

  test-smartcontracts-35:
    <<: *job-test-template
    environment:
      TEST_TYPE: smart_contracts
    docker:
      - image: circleci/python:3.5

  test-smartcontracts-36:
    <<: *job-test-template
    environment:
      TEST_TYPE: smart_contracts

  test-property-35:
    <<: *job-test-template
    environment:
      TEST_TYPE: property
    docker:
      - image: circleci/python:3.5

  test-property-36:
    <<: *job-test-template
    environment:
      TEST_TYPE: property

  test-integration-35:
    <<: *job-test-template
    environment:
      TEST_TYPE: integration
      BLOCKCHAIN_TYPE: '--blockchain-type=geth --blockchain-cache'
    docker:
      - image: circleci/python:3.5

  test-integration-36:
    <<: *job-test-template
    environment:
      TEST_TYPE: integration
      BLOCKCHAIN_TYPE: '--blockchain-type=geth --blockchain-cache'

  test-long-running-35:
    <<: *job-test-template
    environment:
      TEST_TYPE: long_running
      BLOCKCHAIN_TYPE: '--blockchain-type=geth --blockchain-cache'
    docker:
      - image: circleci/python:3.5

  test-long-running-36:
    <<: *job-test-template
    environment:
      TEST_TYPE: long_running
      BLOCKCHAIN_TYPE: '--blockchain-type=geth --blockchain-cache'

  test-api-35:
    <<: *job-test-template
    environment:
      TEST_TYPE: api
      BLOCKCHAIN_TYPE: '--blockchain-type=geth --blockchain-cache'
    docker:
      - image: circleci/python:3.5

  test-api-36:
    <<: *job-test-template
    environment:
      TEST_TYPE: api
      BLOCKCHAIN_TYPE: '--blockchain-type=geth --blockchain-cache'


workflows:
  version: 2
  prepare-check-test:
    jobs:
      - prepare-workspace-35
      - prepare-workspace-36
      - check-35:
          requires:
            - prepare-workspace-35
      - check-36:
          requires:
            - prepare-workspace-36
      - test-unit-35:
          requires:
            - check-35
      - test-unit-36:
          requires:
            - check-36
      - test-smartcontracts-35:
          requires:
            - check-35
      - test-smartcontracts-36:
          requires:
            - check-36
      - test-property-35:
          requires:
            - check-35
      - test-property-36:
          requires:
            - check-36
      - test-integration-35:
          requires:
            - check-35
      - test-integration-36:
          requires:
            - check-36
      - test-long-running-35:
          requires:
            - check-35
      - test-long-running-36:
          requires:
            - check-36
      - test-api-35:
          requires:
            - check-35
      - test-api-36:
          requires:
            - check-36
