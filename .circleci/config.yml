version: 2

# The following are templates for the actual jobs defined below `jobs:`
templates:
  job-template: &job-template
    working_directory: ~/raiden

    environment: &environment
      GETH_URL_LINUX: 'https://gethstore.blob.core.windows.net/builds/geth-linux-amd64-1.7.2-1db4ecdc.tar.gz'
      GETH_URL_MACOS: 'https://gethstore.blob.core.windows.net/builds/geth-darwin-amd64-1.7.2-1db4ecdc.tar.gz'
      GETH_VERSION: '1.7.2'
      SOLC_URL_LINUX: 'https://github.com/ethereum/solidity/releases/download/v0.4.18/solc-static-linux'
      SOLC_URL_MACOS: 'https://www.dropbox.com/s/21xuco6djjpdwd4/solc_0.4.18?dl=0'
      SOLC_VERSION: 'v0.4.18'

    steps:
      - run:
          name: Preparing environment
          # Workaround to enable using env variables in cache keys
          command: |
            echo ${GETH_VERSION} > ~/.env-GETH_VERSION
            echo ${SOLC_VERSION} > ~/.env-SOLC_VERSION
            echo ${PYTHON_VERSION} > ~/.env-PYTHON_VERSION
            echo "export OS_NAME=$(uname -s)" >> ${BASH_ENV}
      - restore_cache:
          keys:
            - source-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Branch }}-
            - source-

      - checkout

      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: system-deps-{{ checksum "~/.env-GETH_VERSION" }}-{{ checksum "~/.env-GETH_VERSION" }}
      - run:
          name: Installing system dependencies
          command: |
            GETH_PATH="${HOME}/.local/bin/geth-${OS_NAME}-${GETH_VERSION}"
            if [ ! -x ${GETH_PATH} ]; then
              mkdir -p ${HOME}/.local/bin
              TEMP=$(mktemp -d 2>/dev/null || mktemp -d -t 'gethtmp')
              pushd ${TEMP}
              wget -O geth.tar.gz ${GETH_URL_LINUX}
              tar xzf geth.tar.gz
              cd geth*/
              install -m 755 geth ${GETH_PATH}
            fi
            ln -sf ${GETH_PATH} ${HOME}/.local/bin/geth

            SOLC_PATH="${HOME}/.local/bin/solc-${OS_NAME}-${SOLC_VERSION}"
            if [ ! -x ${SOLC_PATH} ]; then
              mkdir -p ${HOME}/.local/bin
              curl -L ${SOLC_URL_LINUX} > ${SOLC_PATH}
              chmod 775 ${SOLC_PATH}
            fi
            ln -sf ${SOLC_PATH} ${HOME}/.local/bin/solc
      - save_cache:
          key: system-deps-{{ checksum "~/.env-GETH_VERSION" }}-{{ checksum "~/.env-GETH_VERSION" }}
          paths:
            - "~/.local"
      - run:
          name: Preparing environment
          # Workaround to enable using env variables in cache keys
          command: |
            echo ${PYTHON_VERSION} > ~/.env-PYTHON_VERSION
            echo ${PYTHON_VERSION%.*} > ~/.env-PYTHON_VERSION_SHORT
            echo 'export PYTHON_VERSION_SHORT="${PYTHON_VERSION%.*}"' >> ${BASH_ENV}
            echo 'export PATH=~/venv/bin:~/.local/bin:${PATH}' >> ${BASH_ENV}
      - restore_cache:
          key: pip-cache-{{ checksum "~/.env-PYTHON_VERSION_SHORT" }}
      - restore_cache:
          keys:
            - 'python-deps-{{ checksum "~/.env-PYTHON_VERSION_SHORT" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}'
            - 'python-deps-{{ checksum "~/.env-PYTHON_VERSION_SHORT" }}-'
      - run:
          name: Creating virtualenv
          command: |
            if [ ! -x ~/venv/bin/python ]; then
              python -m venv ~/venv
            fi
            echo 'export VENV_PATH="$HOME/venv"' >> ${BASH_ENV}
      - run:
          name: Installing dependencies
          command: |
            pip install -U pip wheel
            pip install readme_renderer pyinstaller
            pip install -r requirements-dev.txt
            pip install -e .
      - save_cache:
          key: python-deps-{{ checksum "~/.env-PYTHON_VERSION_SHORT" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
          paths:
            - "~/venv"
      - save_cache:
          key: pip-cache-{{ checksum "~/.env-PYTHON_VERSION_SHORT" }}
          paths:
            - "~/.cache/pip"

      - run:
          name: Checking flake8
          command: flake8 raiden/ tools/
      - run:
          name: Checking README formatting
          command: python setup.py check --restructuredtext --strict
      - run:
          name: Running Raiden Smoketest
          command: raiden smoketest

      - restore_cache:
          key: ethash-{{ checksum "~/.local/bin/geth" }}
      - run:
          name: Running tests
          command: |
            mkdir -p test-reports/${TEST_TYPE}
            circleci tests glob raiden/tests/**/test_*.py | circleci tests split --split-by timings | xargs coverage run -m py.test -vvvvvv --log-config='raiden:DEBUG' --random --junit-xml=test-reports/tests-${PYTHON_VERSION_SHORT}.xml --blockchain-type=geth --blockchain-cache
      - save_cache:
          key: ethash-{{ checksum "~/.local/bin/geth" }}
          paths:
            - "~/.ethash"
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

jobs:
  build:
    docker:
      - image: circleci/python:3.6
    steps:
      - run:
          command: |
            for job in 35 36; do
              curl -v --user ${CIRCLE_API_TOKEN}: \
                  --data build_parameters[CIRCLE_JOB]=test-$job \
                  --data revision=${CIRCLE_SHA1} \
                  https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}
            done

  test-35:
    parallelism: 4
    docker:
      - image: circleci/python:3.5
    <<: *job-template

  test-36:
    parallelism: 4
    docker:
      - image: circleci/python:3.6
    <<: *job-template
